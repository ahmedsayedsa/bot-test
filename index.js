const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const makeWASocket = require("@whiskeysockets/baileys").default;
const { useMultiFileAuthState, fetchLatestBaileysVersion } = require("@whiskeysockets/baileys");

async function startBot() {
  const { state, saveCreds } = await useMultiFileAuthState("auth_info");
  const { version } = await fetchLatestBaileysVersion();
  const sock = makeWASocket({
    auth: state,
    version,
    printQRInTerminal: true
  });

  sock.ev.on("creds.update", saveCreds);

  // ุฅุถุงูุฉ event listener ููุชุฃูุฏ ูู ุฃู ุงูุจูุช ูุชุตู
  sock.ev.on("connection.update", (update) => {
    const { connection, lastDisconnect } = update;
    console.log(`๐ ุญุงูุฉ ุงูุงุชุตุงู: ${connection}`);
    
    if (connection === 'close') {
      console.log('โ ุงูุงุชุตุงู ููุทูุนุ ูุญุงููุฉ ุฅุนุงุฏุฉ ุงูุงุชุตุงู...');
      startBot(); // ุฅุนุงุฏุฉ ูุญุงููุฉ ุงูุงุชุตุงู
    } else if (connection === 'open') {
      console.log('โ ุงูุจูุช ูุชุตู ุจูุฌุงุญ!');
    }
  });

  const app = express();
  
  // ุฅุถุงูุฉ middleware ูุฑุตุฏ ูู ุดูุก
  app.use((req, res, next) => {
    const timestamp = new Date().toISOString();
    console.log(`\n${'๐ข'.repeat(60)}`);
    console.log(`๐ก ${timestamp} - ${req.method} ${req.path}`);
    console.log(`๐ IP: ${req.ip || req.connection.remoteAddress}`);
    console.log(`๐ Headers:`, req.headers);
    console.log(`๐ฆ Query:`, req.query);
    
    if (req.method === 'POST') {
      console.log(`๐ฆ Body:`, req.body);
      console.log(`๐ฆ Raw Body:`, req.rawBody);
    }
    console.log(`${'๐ข'.repeat(60)}\n`);
    next();
  });

  // ุฑุตุฏ ุงูุจูุงูุงุช ุงูุฎุงู ูุจู parsing
  app.use('/webhook', (req, res, next) => {
    let rawData = '';
    req.on('data', chunk => {
      rawData += chunk;
      console.log(`๐ก Raw chunk received: ${chunk}`);
    });
    req.on('end', () => {
      console.log(`๐ก Complete raw data: ${rawData}`);
      req.rawBody = rawData;
      next();
    });
  });

  app.use(bodyParser.json({ limit: '50mb' }));
  app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));
  app.use(bodyParser.raw({ type: 'application/json' }));
  app.use(bodyParser.text({ type: 'text/plain' }));

  // Route ูุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุงูุนุงู
  app.get("/test", (req, res) => {
    console.log("๐งช Test route hit!");
    res.json({ 
      message: "Test successful!",
      timestamp: new Date().toISOString(),
      serverRunning: true
    });
  });

  // Route ููุชุฃูุฏ ูู ุฃู ุงูู webhook ุดุบุงู
  app.get("/webhook", (req, res) => {
    console.log("โ GET request ุนูู /webhook - ุงูู webhook ุดุบุงู!");
    res.json({ 
      status: "Webhook is working!", 
      timestamp: new Date().toISOString(),
      message: "ุงูู webhook ุดุบุงู ุจูุฌุงุญ"
    });
  });

  // Route ูุฎุตูุต ูู Easy Order debugging
  app.all("/webhook", async (req, res) => {
    console.log("\n" + "๐ฅ".repeat(50));
    console.log("๐ฉ WEBHOOK HIT! ุงุณุชูููุง request ูู Easy Order:");
    console.log("ุงูุชุงุฑูุฎ ูุงูููุช:", new Date().toISOString());
    
    // ุญูุธ ูู ุงูุชูุงุตูู (Headers + Body)
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `easyorder_full_${timestamp}.json`;
    
    const fullData = {
      timestamp: new Date().toISOString(),
      method: req.method,
      url: req.url,
      headers: req.headers,
      body: req.body,
      query: req.query,
      params: req.params
    };
    
    try {
      fs.writeFileSync(filename, JSON.stringify(fullData, null, 2));
      console.log(`๐พ ูู ุงูุชูุงุตูู ูุญููุธุฉ ูู: ${filename}`);
    } catch (saveError) {
      console.log("โ ุฎุทุฃ ูู ุญูุธ ุงูุจูุงูุงุช:", saveError.message);
    }

    // ุทุจุงุนุฉ ุชูุตูููุฉ ููุจูุงูุงุช
    console.log("๐ ุชูุงุตูู ุงูู Request:");
    console.log("- Method:", req.method);
    console.log("- URL:", req.url);
    console.log("- Content-Type:", req.headers['content-type']);
    console.log("- User-Agent:", req.headers['user-agent']);
    console.log("- Body Type:", typeof req.body);
    console.log("- Body Content:", JSON.stringify(req.body, null, 2));
    console.log("๐ฅ".repeat(50) + "\n");

    try {
      const data = req.body;

      // ูุญุต ููุตู ููุจูุงูุงุช
      console.log("๐ ุชุญููู ุงูุจูุงูุงุช:");
      console.log("- ููุน ุงูุจูุงูุงุช:", typeof data);
      console.log("- ุงูููุงุชูุญ ุงูููุฌูุฏุฉ:", Object.keys(data));
      
      // ุงูุจุญุซ ุนู ุฑูู ุงููุงุชู ุจุทุฑู ูุฎุชููุฉ
      const possiblePhoneFields = [
        'customer_phone', 'phone', 'mobile', 'customer_mobile',
        'clientPhone', 'client_phone', 'phoneNumber', 'phone_number',
        'whatsapp', 'whatsapp_number'
      ];
      
      let customerPhone = null;
      let phoneField = null;
      
      for (const field of possiblePhoneFields) {
        if (data[field]) {
          customerPhone = data[field];
          phoneField = field;
          break;
        }
      }
      
      console.log(`๐ฑ ุฑูู ุงููุงุชู: ${customerPhone} (ูู ุงูุญูู: ${phoneField})`);

      // ุงูุจุญุซ ุนู ุงุณู ุงูุนููู
      const possibleNameFields = [
        'customer_name', 'name', 'client_name', 'clientName',
        'customerName', 'full_name', 'fullName'
      ];
      
      let customerName = null;
      let nameField = null;
      
      for (const field of possibleNameFields) {
        if (data[field]) {
          customerName = data[field];
          nameField = field;
          break;
        }
      }
      
      console.log(`๐ค ุงุณู ุงูุนููู: ${customerName} (ูู ุงูุญูู: ${nameField})`);

      // ุงูุจุญุซ ุนู ุงููุฌููุน
      const possibleTotalFields = [
        'total', 'amount', 'totalAmount', 'total_amount',
        'price', 'totalPrice', 'total_price', 'grandTotal'
      ];
      
      let total = null;
      let totalField = null;
      
      for (const field of possibleTotalFields) {
        if (data[field]) {
          total = data[field];
          totalField = field;
          break;
        }
      }
      
      console.log(`๐ฐ ุงููุฌููุน: ${total} (ูู ุงูุญูู: ${totalField})`);

      // ุงูุจุญุซ ุนู ุงูุนูุงุตุฑ/ุงูููุชุฌุงุช
      const possibleItemsFields = [
        'items', 'products', 'orderItems', 'order_items',
        'cart', 'cartItems', 'cart_items', 'details'
      ];
      
      let items = null;
      let itemsField = null;
      
      for (const field of possibleItemsFields) {
        if (data[field]) {
          items = data[field];
          itemsField = field;
          break;
        }
      }
      
      console.log(`๐๏ธ ุงูุนูุงุตุฑ: ${items ? JSON.stringify(items) : 'ุบูุฑ ููุฌูุฏ'} (ูู ุงูุญูู: ${itemsField})`);

      if (!customerPhone) {
        console.log("โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุฑูู ูุงุชู ุงูุนููู");
        return res.json({ 
          error: "ูููุด ุฑูู ุนููู ูู ุงูุฃูุฑุฏุฑ",
          receivedData: data,
          searchedFields: possiblePhoneFields
        });
      }

      // ุชูุณูู ุงูุฑูู
      let formattedNumber = customerPhone.toString().trim();
      
      // ุฅุฒุงูุฉ ุฃู ูุณุงูุงุช ุฃู ุฑููุฒ ุบูุฑ ูุฑุบูุจ ูููุง
      formattedNumber = formattedNumber.replace(/[\s\-\(\)]/g, '');
      
      // ุฅุถุงูุฉ ููุฏ ูุตุฑ ุฅุฐุง ูุงู ุงูุฑูู ูุจุฏุฃ ุจู 0
      if (formattedNumber.startsWith('0')) {
        formattedNumber = '20' + formattedNumber.substring(1);
      }
      // ุฅุถุงูุฉ ููุฏ ูุตุฑ ุฅุฐุง ูู ููู ููุฌูุฏ
      else if (!formattedNumber.startsWith('20')) {
        formattedNumber = '20' + formattedNumber;
      }
      
      formattedNumber += '@s.whatsapp.net';
      
      console.log(`๐ ุงูุฑูู ุงูููุณู: ${formattedNumber}`);

      // ุตูุงุบุฉ ูุงุฆูุฉ ุงูููุชุฌุงุช
      let itemsList = "";
      if (items && Array.isArray(items)) {
        itemsList = items.map((item, index) => {
          // ุงูุจุญุซ ุนู ุฎุตุงุฆุต ุงูููุชุฌ ุจุทุฑู ูุฎุชููุฉ
          const name = item.name || item.product_name || item.title || item.productName || `ููุชุฌ ${index + 1}`;
          const qty = item.qty || item.quantity || item.amount || 1;
          const price = item.price || item.unitPrice || item.unit_price || 0;
          
          return `- ${name} x${qty} = ${price} ุฌููู`;
        }).join("\n");
      } else if (items && typeof items === 'object') {
        // ุฅุฐุง ูุงูุช ุงูุนูุงุตุฑ object ูููุณ array
        itemsList = Object.entries(items).map(([key, value]) => {
          return `- ${key}: ${value}`;
        }).join("\n");
      }

      // ุตูุงุบุฉ ุงูุฑุณุงูุฉ
      let message = `ูุฑุญุจุงู ${customerName || "ุนููููุง ุงููุฑูู"} ๐\n\n` +
                    `๐ฆ ุดูุฑุงู ูุทูุจู ูู ูุชุฌุฑูุง!\n\n`;
      
      if (itemsList) {
        message += `๐๏ธ ุชูุงุตูู ุงูุทูุจ:\n${itemsList}\n\n`;
      }
      
      message += `๐ฐ ุฅุฌูุงูู ุงูุทูุจ: ${total || "ุณูุชู ุชุญุฏูุฏู"} ุฌููู\n\n` +
                 `๐ ุฑูู ุงูุชูุงุตู: ${customerPhone}\n\n` +
                 `โ ููุชุฃููุฏ: ุงูุชุจ "ููุงูู"\n` +
                 `โ ููุฅูุบุงุก: ุงูุชุจ "ุงูุบุงุก"`;

      // ุฅุฑุณุงู ุงูุฑุณุงูุฉ
      console.log("๐ค ูุญุงููุฉ ุฅุฑุณุงู ุงูุฑุณุงูุฉ...");
      await sock.sendMessage(formattedNumber, { text: message });

      console.log(`โ ุชู ุฅุฑุณุงู ุงูุทูุจ ููุนููู ุจูุฌุงุญ ุนูู ${formattedNumber}`);
      
      res.json({ 
        success: true, 
        message: "ุชู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุจูุฌุงุญ",
        sentTo: formattedNumber,
        customerName: customerName,
        total: total
      });

    } catch (err) {
      console.error("โ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุทูุจ:", err);
      console.error("Stack trace:", err.stack);
      
      res.status(500).json({ 
        error: "ูุดู ูู ูุนุงูุฌุฉ ุงูุทูุจ",
        details: err.message,
        receivedData: req.body
      });
    }
  });

  // Route ูุงุฎุชุจุงุฑ ุฅุฑุณุงู ุฑุณุงูุฉ ูุฏููุฉ
  app.post("/test-send", async (req, res) => {
    try {
      const { phone, message } = req.body;
      
      if (!phone || !message) {
        return res.json({ error: "ูุทููุจ ุฑูู ูุงุชู ูุฑุณุงูุฉ" });
      }
      
      let formattedNumber = phone.toString().replace(/^0/, "20") + "@s.whatsapp.net";
      
      await sock.sendMessage(formattedNumber, { text: message });
      
      console.log(`โ ุฑุณุงูุฉ ุงุฎุชุจุงุฑ ุชู ุฅุฑุณุงููุง ุฅูู ${formattedNumber}`);
      res.json({ success: true, sentTo: formattedNumber });
      
    } catch (error) {
      console.error("โ ุฎุทุฃ ูู ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุงุฎุชุจุงุฑ:", error);
      res.status(500).json({ error: error.message });
    }
  });

  // Route ููุญุตูู ุนูู ุญุงูุฉ ุงูุจูุช
  app.get("/status", (req, res) => {
    res.json({
      botStatus: "running",
      timestamp: new Date().toISOString(),
      webhookUrl: `/webhook`,
      testUrl: `/test-send`
    });
  });

  // Route ูุนุฑุถ ุขุฎุฑ ุงูุจูุงูุงุช ุงููุณุชููุฉ
  app.get("/last-data", (req, res) => {
    try {
      // ูุฑุงุกุฉ ุขุฎุฑ ููู ุจูุงูุงุช
      const files = fs.readdirSync('.').filter(f => f.startsWith('easyorder_full_'));
      if (files.length === 0) {
        return res.json({ message: "ูู ูุชู ุงุณุชูุงู ุฃู ุจูุงูุงุช ุจุนุฏ" });
      }
      
      const latestFile = files.sort().pop();
      const data = JSON.parse(fs.readFileSync(latestFile, 'utf8'));
      
      res.json({
        message: "ุขุฎุฑ ุงูุจูุงูุงุช ุงููุณุชููุฉ",
        filename: latestFile,
        data: data
      });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });

  // ุฅุถุงูุฉ routes ููุชุดุฎูุต
  app.get("/", (req, res) => {
    res.json({
      message: "๐ค WhatsApp Bot is running!",
      timestamp: new Date().toISOString(),
      endpoints: {
        webhook: "/webhook (POST)",
        status: "/status (GET)", 
        lastData: "/last-data (GET)",
        testSend: "/test-send (POST)"
      }
    });
  });

  // ุฅุถุงูุฉ catch-all route ูุฑุตุฏ ุฃู requests ุฃุฎุฑู
  app.all("*", (req, res) => {
    console.log(`๐ค Request ุบูุฑ ูุชููุน: ${req.method} ${req.path}`);
    console.log("Headers:", req.headers);
    console.log("Body:", req.body);
    
    res.json({
      message: "Route ุบูุฑ ููุฌูุฏ",
      method: req.method,
      path: req.path,
      availableEndpoints: ["/webhook", "/status", "/last-data", "/test-send"]
    });
  });

  const PORT = process.env.PORT || 5000;
  const HOST = '127.0.0.1'; // ุงุณุชุฎุฏุงู IPv4 ุจุฏูุงู ูู localhost
  
  app.listen(PORT, HOST, () => {
    console.log(`๐ Webhook server ุดุบุงู ุนูู http://${HOST}:${PORT}`);
    console.log(`๐ ููุฑุงุฌุนุฉ ุงูุญุงูุฉ: http://${HOST}:${PORT}/status`);
    console.log(`๐ ููุฑุงุฌุนุฉ ุขุฎุฑ ุงูุจูุงูุงุช: http://${HOST}:${PORT}/last-data`);
    console.log(`๐งช ูุงุฎุชุจุงุฑ ุงูุฅุฑุณุงู: POST ุฅูู http://${HOST}:${PORT}/test-send`);
    console.log(`๐จ webhook URL: http://${HOST}:${PORT}/webhook`);
    console.log(`๐ Public ngrok URL: ุงุณุชุฎุฏู 'ngrok http ${PORT}' ูู terminal ุฌุฏูุฏ`);
  });

  // ุงูุชุนุงูู ูุน ุงูุฑุณุงุฆู ุงููุงุฑุฏุฉ (ููุชุฃููุฏ ูุงูุฅูุบุงุก)
  sock.ev.on("messages.upsert", async (m) => {
    const message = m.messages[0];
    
    if (!message.message || message.key.fromMe) return;
    
    const text = message.message.conversation || 
                 message.message.extendedTextMessage?.text || "";
    
    console.log(`๐จ ุฑุณุงูุฉ ูุงุฑุฏุฉ ูู ${message.key.remoteJid}: ${text}`);
    
    if (text.toLowerCase().includes("ููุงูู") || text.toLowerCase().includes("ุชุฃููุฏ")) {
      await sock.sendMessage(message.key.remoteJid, { 
        text: "โ ุชู ุชุฃููุฏ ุทูุจู ุจูุฌุงุญ! ุณูุชู ุงูุชุญุถูุฑ ูุงูุชูุตูู ูุฑูุจุงู. ุดูุฑุงู ูุซูุชู ๐" 
      });
      console.log("โ ุชู ุชุฃููุฏ ุงูุทูุจ");
      
    } else if (text.toLowerCase().includes("ุงูุบุงุก") || text.toLowerCase().includes("ุฅูุบุงุก")) {
      await sock.sendMessage(message.key.remoteJid, { 
        text: "โ ุชู ุฅูุบุงุก ุทูุจู. ูุฃุณู ูุนุฏู ุชููููุง ูู ุฎุฏูุชู ูุฐู ุงููุฑุฉ ๐" 
      });
      console.log("โ ุชู ุฅูุบุงุก ุงูุทูุจ");
    }
  });
}

// ุฅุถุงูุฉ error handling ุนุงูุฉ
process.on('uncaughtException', (error) => {
  console.error('โ Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('โ Unhandled Rejection at:', promise, 'reason:', reason);
});

startBot().catch(err => {
  console.error("โ ุฎุทุฃ ูู ุจุฏุก ุงูุจูุช:", err);
});