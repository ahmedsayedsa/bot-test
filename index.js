// ุงุณุชูุฑุงุฏ ุงูููุชุจุงุช ุงููุทููุจุฉ
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const path = require("path");
const crypto = require("crypto");

// ุฅุถุงูุฉ crypto polyfill ููู global scope
global.crypto = crypto;
if (crypto.webcrypto) {
    global.crypto.webcrypto = crypto.webcrypto;
}

const makeWASocket = require("@whiskeysockets/baileys").default;
const { useMultiFileAuthState, fetchLatestBaileysVersion, DisconnectReason } = require("@whiskeysockets/baileys");
const qrcode = require("qrcode");

// ุฏุงูุฉ ูุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ ูู Easy Order
async function updateOrderStatus(customerPhone, status, notes = '') {
    try {
        const easyOrderWebhookUrl = process.env.EASYORDER_UPDATE_URL || 'https://your-easyorder-webhook.com/update-order';
        
        const updateData = {
            customer_phone: customerPhone,
            status: status, // 'confirmed', 'cancelled', 'processing', 'shipped', 'delivered'
            notes: notes,
            updated_by: 'whatsapp_bot',
            timestamp: new Date().toISOString()
        };
        
        console.log(`๐ ูุญุงููุฉ ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ ูู Easy Order:`, updateData);
        
        // ุชุฌุฑุจุฉ fetch ูุน error handling ุฃุญุณู
        const response = await fetch(easyOrderWebhookUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${process.env.EASYORDER_API_KEY || ''}`,
            },
            body: JSON.stringify(updateData),
            timeout: 10000 // 10 seconds timeout
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log(`โ ุชู ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ ูู Easy Order ุจูุฌุงุญ:`, result);
            return { success: true, data: result };
        } else {
            console.error(`โ ูุดู ูู ุชุญุฏูุซ Easy Order:`, response.status, await response.text());
            return { success: false, error: `HTTP ${response.status}` };
        }
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ:', error.message);
        return { success: false, error: error.message };
    }
}

let isWhatsappConnected = false;
let qrCodeData = null;
let sock = null;
let connectionRetries = 0;
const maxRetries = 5;

// ุฏุงูุฉ ูุญูุธ ูุนูููุงุช ุงูุงุชุตุงู ุจุดูู ูุณุชูุฑ
async function saveAuthInfo() {
    try {
        const authDir = path.join(__dirname, 'auth_info_persistent');
        if (!fs.existsSync(authDir)) {
            fs.mkdirSync(authDir, { recursive: true });
        }
        console.log('๐ Auth info directory ready:', authDir);
        return authDir;
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ูุฌูุฏ ุงูุญูุธ:', error);
        return 'auth_info';
    }
}

async function startBot() {
    try {
        console.log("๐ ุจุฏุก ุชุดุบูู ุงูุจูุช...");
        
        // ุงุณุชุฎุฏุงู ูุฌูุฏ ุซุงุจุช ููุญูุธ
        const authDir = await saveAuthInfo();
        const { state, saveCreds } = await useMultiFileAuthState(authDir);
        const { version } = await fetchLatestBaileysVersion();
        
        console.log(`๐ฑ Baileys version: ${version}`);
        
        sock = makeWASocket({
            auth: state,
            version,
            printQRInTerminal: false,
            browser: ["AutoService Bot", "Chrome", "4.0.0"],
            connectTimeoutMs: 60000,
            defaultQueryTimeoutMs: 0,
            keepAliveIntervalMs: 10000,
            markOnlineOnConnect: true,
            generateHighQualityLinkPreview: false,
            syncFullHistory: false,
            // ุชุญุณูู ุงูุงุชุตุงู
            retryRequestDelayMs: 250,
            maxMsgRetryCount: 3,
            transactionOpts: {
                maxCommitRetries: 10,
                delayBetweenTriesMs: 3000
            }
        });

        sock.ev.on("creds.update", saveCreds);

        sock.ev.on("connection.update", async (update) => {
            const { connection, lastDisconnect, qr } = update;
            console.log(`๐ ุญุงูุฉ ุงูุงุชุตุงู: ${connection}`);

            if (qr) {
                try {
                    qrCodeData = await qrcode.toDataURL(qr);
                    console.log('๐ก ุชู ุฅูุดุงุก QR code ุฌุฏูุฏ');
                    
                    // ุญูุธ QR ูู ููู ูููุตูู ุฅููู
                    fs.writeFileSync(path.join(__dirname, 'current_qr.txt'), qr);
                } catch (qrError) {
                    console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก QR:', qrError);
                }
            }

            if (connection === 'close') {
                const shouldReconnect = lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut;
                console.log('โ ุงูุงุชุตุงู ููุทูุน:', lastDisconnect?.error, 'ุฅุนุงุฏุฉ ุงูุงุชุตุงู:', shouldReconnect);
                
                isWhatsappConnected = false;
                qrCodeData = null;
                
                if (shouldReconnect && connectionRetries < maxRetries) {
                    connectionRetries++;
                    console.log(`๐ ูุญุงููุฉ ุฅุนุงุฏุฉ ุงูุงุชุตุงู ${connectionRetries}/${maxRetries}`);
                    setTimeout(() => startBot(), 5000 * connectionRetries);
                } else if (lastDisconnect?.error?.output?.statusCode === DisconnectReason.loggedOut) {
                    console.log('โ ุชู ุชุณุฌูู ุงูุฎุฑูุฌุ ุญุฐู ุจูุงูุงุช ุงููุตุงุฏูุฉ...');
                    try {
                        const authDir = path.join(__dirname, 'auth_info_persistent');
                        if (fs.existsSync(authDir)) {
                            fs.rmSync(authDir, { recursive: true, force: true });
                        }
                    } catch (cleanupError) {
                        console.error('โ ุฎุทุฃ ูู ุญุฐู auth info:', cleanupError);
                    }
                    connectionRetries = 0;
                    setTimeout(() => startBot(), 5000);
                } else {
                    console.log('โ ูุดู ูู ุงูุงุชุตุงู ุจุนุฏ ุนุฏุฉ ูุญุงููุงุช');
                }
                
            } else if (connection === 'open') {
                console.log('โ ุงูุจูุช ูุชุตู ุจูุงุชุณุงุจ ุจูุฌุงุญ!');
                isWhatsappConnected = true;
                qrCodeData = null;
                connectionRetries = 0;
                
                // ุญุฐู ููู QR ุจุนุฏ ุงูุงุชุตุงู
                try {
                    const qrFile = path.join(__dirname, 'current_qr.txt');
                    if (fs.existsSync(qrFile)) {
                        fs.unlinkSync(qrFile);
                    }
                } catch (deleteError) {
                    console.error('โ ุฎุทุฃ ูู ุญุฐู QR file:', deleteError);
                }
                
                // ุฑุณุงูุฉ ุชุฃููุฏ (ุงุฎุชูุงุฑูุฉ)
                console.log('๐ ุงูุจูุช ุฌุงูุฒ ูุงุณุชูุจุงู ุงูุทูุจุงุช!');
                
            } else if (connection === 'connecting') {
                console.log('๐ ุฌุงุฑู ุงูุงุชุตุงู ุจูุงุชุณุงุจ...');
            }
        });

        // ุงูุชุนุงูู ูุน ุงูุฑุณุงุฆู ุงููุงุฑุฏุฉ
        sock.ev.on("messages.upsert", async (m) => {
            try {
                const message = m.messages[0];
                if (!message.message || message.key.fromMe) return;
                
                const customerJid = message.key.remoteJid;
                const customerPhone = customerJid.replace('@s.whatsapp.net', '');
                
                console.log(`๐จ ุฑุณุงูุฉ ูุงุฑุฏุฉ ูู ${customerPhone}`);
                
                // ูุนุงูุฌุฉ Poll Updates (ุฅุฌุงุจุงุช ุงูุงุณุชูุชุงุก)
                const pollUpdate = message.message.pollUpdateMessage;
                if (pollUpdate) {
                    try {
                        const vote = pollUpdate.vote;
                        if (vote && vote.selectedOptions && vote.selectedOptions.length > 0) {
                            const selectedOption = vote.selectedOptions[0];
                            console.log(`๐ณ๏ธ ุงุณุชูุชุงุก: ุงูุนููู ${customerPhone} ุงุฎุชุงุฑ ุงูุฎูุงุฑ: ${selectedOption}`);
                            
                            let responseText = "";
                            let orderStatus = "";
                            let statusNote = "";
                            
                            if (selectedOption === 0) { // โ ุชุฃููุฏ ุงูุทูุจ
                                responseText = "โ ููุชุงุฒ! ุชู ุชุฃููุฏ ุทูุจู ุจูุฌุงุญ!\n\n๐ ุณูุชู ุชุฌููุฒ ุทูุจู ุฎูุงู 1-2 ููู ุนูู.\n๐ ุณูุชูุงุตู ูุนู ูุชุฑุชูุจ ููุนุฏ ุงูุชูุตูู.\n\n๐ ุดูุฑุงู ูุซูุชู ูู ุงูุชู ุณูุฑูุณ!";
                                orderStatus = 'confirmed';
                                statusNote = 'ุชู ุชุฃููุฏ ุงูุทูุจ ุนุจุฑ ุงูุงุณุชูุชุงุก';
                                
                            } else if (selectedOption === 1) { // โ ุฅูุบุงุก ุงูุทูุจ  
                                responseText = "โ ุชู ุฅูุบุงุก ุทูุจู ุจูุงุกู ุนูู ุงุฎุชูุงุฑู.\n\n๐ ูุฃุณู ูุนุฏู ุชููููุง ูู ุฎุฏูุชู ูุฐู ุงููุฑุฉ.\n๐ก ููููู ุงูุทูุจ ูุฑุฉ ุฃุฎุฑู ูู ุฃู ููุช.\n\n๐ค ูุชุทูุน ูุฎุฏูุชู ูุฑูุจุงู!";
                                orderStatus = 'cancelled';
                                statusNote = 'ุชู ุฅูุบุงุก ุงูุทูุจ ุนุจุฑ ุงูุงุณุชูุชุงุก';
                            }
                            
                            if (responseText && orderStatus) {
                                // ุฅุฑุณุงู ุงูุฑุฏ
                                await sock.sendMessage(customerJid, { text: responseText });
                                
                                // ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ ูู Easy Order
                                const updateResult = await updateOrderStatus(customerPhone, orderStatus, statusNote);
                                if (updateResult.success) {
                                    console.log(`โ ุชู ุชุญุฏูุซ ุงูุทูุจ ูู Easy Order: ${orderStatus}`);
                                } else {
                                    console.error(`โ ูุดู ุชุญุฏูุซ Easy Order: ${updateResult.error}`);
                                }
                            }
                            return;
                        }
                    } catch (pollError) {
                        console.error('โ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุงุณุชูุชุงุก:', pollError);
                    }
                }
                
                // ูุนุงูุฌุฉ ุงูุฑุฏูุฏ ุนูู ุงูุฃุฒุฑุงุฑ
                const buttonResponse = message.message.buttonsResponseMessage ||
                                     message.message.listResponseMessage ||
                                     message.message.templateButtonReplyMessage ||
                                     message.message.interactiveResponseMessage;
                
                let buttonId = null;
                
                if (buttonResponse) {
                    if (message.message.buttonsResponseMessage) {
                        buttonId = message.message.buttonsResponseMessage.selectedButtonId;
                    } else if (message.message.listResponseMessage) {
                        buttonId = message.message.listResponseMessage.singleSelectReply.selectedRowId;
                    } else if (message.message.templateButtonReplyMessage) {
                        buttonId = message.message.templateButtonReplyMessage.selectedId;
                    } else if (message.message.interactiveResponseMessage) {
                        const nativeFlow = message.message.interactiveResponseMessage.nativeFlowResponseMessage;
                        if (nativeFlow && nativeFlow.paramsJson) {
                            try {
                                const params = JSON.parse(nativeFlow.paramsJson);
                                buttonId = params.id;
                            } catch (e) {
                                console.log('โ ุฎุทุฃ ูู ุชุญููู Interactive Response');
                            }
                        }
                    }
                    
                    console.log(`๐ฒ ุชู ุงูุถุบุท ุนูู ุฒุฑ: ${buttonId} ูู ุงูุนููู: ${customerPhone}`);
                    
                    let responseText = "";
                    let orderStatus = "";
                    let statusNote = "";
                    
                    if (buttonId === 'confirm_order') {
                        responseText = "โ ููุชุงุฒ! ุชู ุชุฃููุฏ ุทูุจู ุจูุฌุงุญ!\n\n๐ ุณูุชู ุชุฌููุฒ ุทูุจู ุฎูุงู 1-2 ููู ุนูู.\n๐ ุณูุชูุงุตู ูุนู ูุชุฑุชูุจ ููุนุฏ ุงูุชูุตูู.\n\n๐ ุดูุฑุงู ูุซูุชู ูู ุงูุชู ุณูุฑูุณ!";
                        orderStatus = 'confirmed';
                        statusNote = 'ุชู ุชุฃููุฏ ุงูุทูุจ ุนุจุฑ ุงูุฃุฒุฑุงุฑ';
                        
                    } else if (buttonId === 'cancel_order') {
                        responseText = "โ ุชู ุฅูุบุงุก ุทูุจู ุจูุงุกู ุนูู ุทูุจู.\n\n๐ ูุฃุณู ูุนุฏู ุชููููุง ูู ุฎุฏูุชู ูุฐู ุงููุฑุฉ.\n๐ก ููููู ุงูุทูุจ ูุฑุฉ ุฃุฎุฑู ูู ุฃู ููุช.\n\n๐ค ูุชุทูุน ูุฎุฏูุชู ูุฑูุจุงู!";
                        orderStatus = 'cancelled';
                        statusNote = 'ุชู ุฅูุบุงุก ุงูุทูุจ ุนุจุฑ ุงูุฃุฒุฑุงุฑ';
                    }
                    
                    if (responseText && orderStatus) {
                        await sock.sendMessage(customerJid, { text: responseText });
                        
                        // ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ
                        const updateResult = await updateOrderStatus(customerPhone, orderStatus, statusNote);
                        if (updateResult.success) {
                            console.log(`โ ุชู ุชุญุฏูุซ ุงูุทูุจ ูู Easy Order: ${orderStatus}`);
                        } else {
                            console.error(`โ ูุดู ุชุญุฏูุซ Easy Order: ${updateResult.error}`);
                        }
                    }
                    return;
                }
                
                // ูุนุงูุฌุฉ ุงูุฑุฏูุฏ ุงููุตูุฉ
                const text = message.message.conversation || 
                           message.message.extendedTextMessage?.text || "";
                
                if (text && text.trim()) {
                    const lowerText = text.toLowerCase().trim();
                    
                    // ูููุงุช ุงูุชุฃููุฏ
                    const confirmWords = ['ููุงูู', 'ุชู', 'ูุนู', 'yes', 'ok', 'ุฃูุงูู', 'ุงูุงูู', 'ููุงููู', 'ุชูุงู', 'ุงููู', 'ุญุงุถุฑ', 'ูุงุดู', 'ุตุญ', 'ูุฏู'];
                    // ูููุงุช ุงูุฅูุบุงุก
                    const cancelWords = ['ุฅูุบุงุก', 'ุงูุบุงุก', 'ูุง', 'no', 'ุฑูุถ', 'ูุด ููุงูู', 'ูุฃ', 'ูุงุก', 'ูุด ุนุงูุฒ', 'ูุด ุนุงูุฒ', 'cancel'];
                    
                    const isConfirm = confirmWords.some(word => lowerText.includes(word));
                    const isCancel = cancelWords.some(word => lowerText.includes(word));
                    
                    console.log(`๐ ุฑุฏ ูุตู ูู ${customerPhone}: "${text}" | ุชุฃููุฏ: ${isConfirm} | ุฅูุบุงุก: ${isCancel}`);
                    
                    let responseText = "";
                    let orderStatus = "";
                    let statusNote = "";
                    
                    if (isConfirm) {
                        responseText = "โ ููุชุงุฒ! ุชู ุชุฃููุฏ ุทูุจู ุจูุฌุงุญ!\n\n๐ ุณูุชู ุชุฌููุฒ ุทูุจู ุฎูุงู 1-2 ููู ุนูู.\n๐ ุณูุชูุงุตู ูุนู ูุชุฑุชูุจ ููุนุฏ ุงูุชูุตูู.\n\n๐ ุดูุฑุงู ูุซูุชู ูู ุงูุชู ุณูุฑูุณ!";
                        orderStatus = 'confirmed';
                        statusNote = `ุชู ุชุฃููุฏ ุงูุทูุจ ูุตูุงู: "${text}"`;
                        
                    } else if (isCancel) {
                        responseText = "โ ุชู ุฅูุบุงุก ุทูุจู ููุง ุทูุจุช.\n\n๐ ูุฃุณู ูุนุฏู ุชููููุง ูู ุฎุฏูุชู ูุฐู ุงููุฑุฉ.\n๐ก ููููู ุงูุทูุจ ูุฑุฉ ุฃุฎุฑู ูู ุฃู ููุช.\n\n๐ค ูุชุทูุน ูุฎุฏูุชู ูุฑูุจุงู!";
                        orderStatus = 'cancelled';
                        statusNote = `ุชู ุฅูุบุงุก ุงูุทูุจ ูุตูุงู: "${text}"`;
                        
                    } else {
                        // ุฑุฏ ุบูุฑ ูุงุถุญ
                        responseText = `๐ค ุนุฐุฑุงูุ ูู ุฃููู ุฑุฏู: "${text}"\n\n` +
                                      `๐ ูุฑุฌู ุงูุฑุฏ ุจุฃุญุฏ ุงูุฎูุงุฑุงุช ุงูุชุงููุฉ:\n\n` +
                                      `โ ููุชุฃููุฏ: "ููุงูู" ุฃู "ูุนู" ุฃู "ุชู"\n` +
                                      `โ ููุฅูุบุงุก: "ุฅูุบุงุก" ุฃู "ูุง" ุฃู "ุฑูุถ"\n\n` +
                                      `๐ค ุดูุฑุงู ูุตุจุฑู!`;
                        console.log(`โ ุฑุฏ ุบูุฑ ูุงุถุญ ูู ${customerPhone}: "${text}"`);
                    }
                    
                    // ุฅุฑุณุงู ุงูุฑุฏ
                    await sock.sendMessage(customerJid, { text: responseText });
                    
                    // ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ ุฅุฐุง ูุงู ูุงุถุญ
                    if (orderStatus) {
                        const updateResult = await updateOrderStatus(customerPhone, orderStatus, statusNote);
                        if (updateResult.success) {
                            console.log(`โ ุชู ุชุญุฏูุซ ุงูุทูุจ ูู Easy Order: ${orderStatus}`);
                        } else {
                            console.error(`โ ูุดู ุชุญุฏูุซ Easy Order: ${updateResult.error}`);
                            // ูููู ุฅุถุงูุฉ ูุญุงููุฉ ุฃุฎุฑู ุฃู ุชุณุฌูู ูู ูุงุนุฏุฉ ุจูุงูุงุช ูุญููุฉ
                        }
                    }
                }
                
            } catch (msgError) {
                console.error('โ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ:', msgError);
            }
        });

    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุจุฏุก ุงูุจูุช:', error);
        setTimeout(() => startBot(), 15000);
    }
}

// ุฅุนุฏุงุฏ Express
const app = express();

// Middleware
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// CORS
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
    
    if (req.method === 'OPTIONS') {
        res.sendStatus(200);
    } else {
        next();
    }
});

// Logging
app.use((req, res, next) => {
    console.log(`๐ก ${new Date().toISOString()} - ${req.method} ${req.path}`);
    next();
});

// Routes
app.get("/", (req, res) => {
    try {
        if (!isWhatsappConnected && qrCodeData) {
            const html = `
            <!DOCTYPE html>
            <html>
            <head>
                <title>AutoService Bot - QR Code</title>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <style>
                    body { 
                        font-family: Arial, sans-serif; 
                        display: flex; 
                        flex-direction: column; 
                        align-items: center; 
                        justify-content: center; 
                        min-height: 100vh; 
                        margin: 0; 
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        text-align: center;
                        padding: 20px;
                        box-sizing: border-box;
                    }
                    .container { 
                        background: rgba(255,255,255,0.95); 
                        color: #333;
                        padding: 30px; 
                        border-radius: 15px; 
                        box-shadow: 0 8px 25px rgba(0,0,0,0.2); 
                        max-width: 400px;
                        width: 100%;
                    }
                    img { 
                        border: 3px solid #25D366; 
                        border-radius: 10px; 
                        margin: 20px 0; 
                        max-width: 100%;
                        height: auto;
                    }
                    .status { 
                        color: #25D366; 
                        font-weight: bold;
                        font-size: 18px;
                    }
                    .title {
                        background: linear-gradient(45deg, #25D366, #128C7E);
                        -webkit-background-clip: text;
                        -webkit-text-fill-color: transparent;
                        font-size: 24px;
                        font-weight: bold;
                        margin-bottom: 10px;
                    }
                </style>
                <script>
                    setTimeout(() => window.location.reload(), 5000);
                </script>
            </head>
            <body>
                <div class="container">
                    <h1 class="title">๐ AutoService Bot</h1>
                    <h2>ุงูุณุญ ุงูุฑูุฒ ุจุงุณุชุฎุฏุงู ูุงุชุณุงุจ</h2>
                    <img src="${qrCodeData}" alt="QR Code">
                    <p class="status">๐ ูู ุงูุชุธุงุฑ ุงููุณุญ...</p>
                    <small>ุณุชุชู ุฅุนุงุฏุฉ ุชุญููู ุงูุตูุญุฉ ุชููุงุฆูุงู ุฎูุงู 5 ุซูุงู</small>
                </div>
            </body>
            </html>`;
            res.send(html);
            
        } else if (isWhatsappConnected) {
            const html = `
            <!DOCTYPE html>
            <html>
            <head>
                <title>AutoService Bot - Connected</title>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <style>
                    body { 
                        font-family: Arial, sans-serif; 
                        display: flex; 
                        flex-direction: column; 
                        align-items: center; 
                        justify-content: center; 
                        min-height: 100vh; 
                        margin: 0; 
                        background: linear-gradient(135deg, #25D366 0%, #128C7E 100%);
                        color: white; 
                        text-align: center;
                        padding: 20px;
                        box-sizing: border-box;
                    }
                    .container {
                        background: rgba(255,255,255,0.1);
                        padding: 40px;
                        border-radius: 20px;
                        backdrop-filter: blur(10px);
                        border: 1px solid rgba(255,255,255,0.2);
                    }
                    .pulse {
                        animation: pulse 2s infinite;
                    }
                    @keyframes pulse {
                        0% { transform: scale(1); }
                        50% { transform: scale(1.05); }
                        100% { transform: scale(1); }
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1 class="pulse">โ ุงูุจูุช ูุชุตู ุจูุฌุงุญ!</h1>
                    <p>๐ค AutoService Bot ุฌุงูุฒ ููุชุตู ุจูุงุชุณุงุจ</p>
                    <p>๐ฑ ุฌุงูุฒ ูุงุณุชูุจุงู ุงูุทูุจุงุช ูู Easy Order</p>
                    <p>๐ ุฎุฏูุฉ ุนููุงุก ุฃูุชู ุณูุฑูุณ ุงูุขููุฉ ุชุนูู ุงูุขู</p>
                </div>
            </body>
            </html>`;
            res.send(html);
            
        } else {
            res.json({
                status: "๐ Starting...",
                connected: false,
                message: "ุงูุจูุช ูุญุงูู ุงูุงุชุตุงู ุจูุงุชุณุงุจ...",
                retries: connectionRetries
            });
        }
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ:', error);
        res.status(500).json({ error: "ุฎุทุฃ ูู ุชุญููู ุงูุตูุญุฉ" });
    }
});

app.get("/status", (req, res) => {
    res.json({
        connected: isWhatsappConnected,
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        hasQR: !!qrCodeData,
        memory: process.memoryUsage(),
        retries: connectionRetries
    });
});

// Webhook ูุงุณุชูุจุงู ุทูุจุงุช Easy Order
app.post("/webhook", async (req, res) => {
    console.log("\n" + "๐ฅ".repeat(50));
    console.log("๐ฉ WEBHOOK HIT! ุงุณุชูููุง request ูู Easy Order:");
    console.log("ุงูุชุงุฑูุฎ ูุงูููุช:", new Date().toISOString());
    console.log("ุงูุจูุงูุงุช ุงููุณุชููุฉ:", JSON.stringify(req.body, null, 2));
    console.log("๐ฅ".repeat(50) + "\n");

    if (!isWhatsappConnected) {
        console.log("โ ุงูุจูุช ุบูุฑ ูุชุตู ุจูุงุชุณุงุจ");
        return res.status(503).json({
            error: "WhatsApp bot is not connected",
            message: "ุงูุจูุช ุบูุฑ ูุชุตู ุจูุงุชุณุงุจ ุญุงููุงู"
        });
    }

    try {
        const data = req.body;
        
        // ุงุณุชุฎุฑุงุฌ ุงูุจูุงูุงุช
        const customerName = data.full_name || data.customer_name || data.name || "ุนููููุง ุงููุฑูู";
        const customerPhone = data.phone || data.customer_phone || data.mobile || null;
        const total = data.total_cost || data.total || data.totalAmount || data.amount || "ุณูุชู ุชุญุฏูุฏู";
        const address = data.address || data.shipping_address || "ุบูุฑ ูุญุฏุฏ";
        const items = data.cart_items || data.items || data.products || [];
        
        console.log(`๐ค ุงูุนููู: ${customerName}`);
        console.log(`๐ฑ ุงููุงุชู: ${customerPhone}`);
        console.log(`๐ฐ ุงููุฌููุน: ${total}`);
        console.log(`๐ ุงูุนููุงู: ${address}`);
        console.log(`๐๏ธ ุงูุนูุงุตุฑ:`, items);
        
        if (!customerPhone) {
            console.log("โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุฑูู ูุงุชู ุงูุนููู");
            return res.status(400).json({ 
                error: "ูููุด ุฑูู ุนููู ูู ุงูุฃูุฑุฏุฑ",
                receivedData: data
            });
        }

        // ุชูุณูู ูุงุฆูุฉ ุงูููุชุฌุงุช
        let itemsList = "";
        if (items && Array.isArray(items) && items.length > 0) {
            itemsList = items.map((item, index) => {
                const name = item.product?.name || item.name || item.title || `ููุชุฌ ${index + 1}`;
                const qty = item.quantity || item.qty || 1;
                const price = item.price || item.unit_price || '';
                return `- ${name}: ${qty} ูุทุนุฉ${price ? ` (${price} ุฌ.ู)` : ''}`;
            }).join("\n");
        }
        
        // ุตูุงุบุฉ ุงูุฑุณุงูุฉ ุงูุฃุณุงุณูุฉ
        let message = `ูุฑุญุจุงู ${customerName} ๐\n\n` +
                      `ุดูุฑูุง ูุงุฎุชูุงุฑู ุงูุชู ุณูุฑูุณ! ูุณุนุฏูุง ุฅุจูุงุบู ุจุฃูู ุชู ุงุณุชูุงู ุทูุจู ุจูุฌุงุญ.\n\n`;
        
        if (itemsList) {
            message += `๐๏ธ ุชูุงุตูู ุงูุทูุจ:\n${itemsList}\n\n`;
        }
        
        message += `๐ฐ ุงูุฅุฌูุงูู: ${total} ุฌ.ู\n` +
                   `๐ ุงูุนููุงู: ${address}\n\n` +
                   `ููุจุฏุก ูู ุชุฌููุฒ ุทูุจู ูุดุญููุ ููุฑุฌู ุชุฃููุฏ ุงูุทูุจ.